{"version":3,"sources":["homeScreen/index.js","card/index.js","utils/dialogBox.js","game/index.js","App.js","index.js"],"names":["dialogBoxData","title","focusConfirm","html","type","confirmButtonText","allowOutsideClick","preConfirm","email","document","getElementById","value","password","HomeScreen","clickMe","bind","fetch","method","body","JSON","stringify","headers","then","res","json","a","status","MySwal","fire","userDetails","props","previousHistory","handleChangeEmail","clickEvent","swalval","v","dismiss","this","Grid","className","gameStart","onClick","React","Component","Card","position","index","console","log","data-index","data-cardtype","DialogBox","Dialog","open","onClose","handleClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","history","length","map","data","key","moment","timeStamp","format","totalMove","DialogActions","Button","color","uniqueCards","MemoryGame","shuffleCards","pickCard","addWin","ignoreCardClicks","state","cards","selectedCards","registered","multiplier","loopTimes","multiplied","i","_","concat","userData","pastMove","getCards","multipliedCards","multiplyCards","shuffle","val","resumeGame","isContinue","swal","text","buttons","cancel","confirm","confirmButtonColor","cancelButtonColor","isConfirm","setState","allCards","newPosition","button","newHistory","push","Date","attribute","eq","curCards","curSelectedCards","selectedHasSameAttribute","changeAllPositionsOfSelected","reduce","result","_this","setTimeout","checkForMatch","roll","window","location","reload","cardIndex","style","paddingTop","container","direction","justify","alignItems","padding","variant","handleDialog","handleConfirmLogOut","thisCard","App","ReactDOM","render","Fragment"],"mappings":"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","file":"static/js/main.1cf6a9e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../main.scss\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MySwal from \"sweetalert2\";\r\n\r\nlet dialogBoxData = {\r\n    title: \"Memory Game\",\r\n    focusConfirm: false,\r\n    html: `\r\n      <h3>Please signUp/ signIn to play game</h3>\r\n      <input class=\"swal2-input\" id=\"email\" type=\"email\" placeholder=\"Enter your email...\" /><br />\r\n      <input class=\"swal2-input\" id=\"password\" type=\"password\" placeholder=\"Enter your password...\" /><br />`,\r\n    type: \"warning\",\r\n    confirmButtonText: \"Login!\",\r\n    allowOutsideClick: false,\r\n    preConfirm: () => ({\r\n        email: document.getElementById(\"email\").value,\r\n        password: document.getElementById(\"password\").value,\r\n    }),\r\n};\r\n\r\nexport class HomeScreen extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.clickMe = this.clickMe.bind(this);\r\n    }\r\n    async clickMe(email, password) {\r\n        await fetch(\"/api/email\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ email, password }),\r\n            headers: {\r\n                \"Content-type\": \"application/json; charset=UTF-8\",\r\n            },\r\n        })\r\n            .then((res) => res.json())\r\n            .then(async (res) => {\r\n                if (res.status && res.status === 404) {\r\n                    await MySwal.fire({\r\n                        type: \"error\",\r\n                        title: \"Email already exist! Please enter valid password\",\r\n                    });\r\n                    this.userDetails();\r\n                } else {\r\n                    this.props.previousHistory(res);\r\n                    this.props.handleChangeEmail(email);\r\n                    this.props.clickEvent(res);\r\n                }\r\n            });\r\n    }\r\n    async userDetails() {\r\n        const swalval = await MySwal.fire(dialogBoxData);\r\n        let v = (swalval && swalval.value) || swalval.dismiss;\r\n        if (v && v.email && v.password) {\r\n            this.clickMe(v.email, v.password);\r\n        } else {\r\n            await MySwal.fire({\r\n                type: \"error\",\r\n                title: \"All fields are required!!\",\r\n            });\r\n            this.userDetails();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Grid\r\n                className={\r\n                    this.props.gameStart\r\n                        ? \"homescreen homescreen--visible\"\r\n                        : \"homescreen homescreen--hidden\"\r\n                }\r\n            >\r\n                <button\r\n                    className=\"homescreen__shuffle-button \"\r\n                    onClick={() => this.userDetails()}\r\n                >\r\n                    Play Now!\r\n          </button>\r\n            </Grid>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport \"../main.scss\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nexport class Card extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.clickMe = this.clickMe.bind(this);\r\n    }\r\n    clickMe() {\r\n      if (this.props.position === \"unselected\") {\r\n        this.props.clickEvent(this.props.index);\r\n      } else {\r\n        console.log(\"cant click me! my position is \" + this.props.position);\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <Grid\r\n          data-index={this.props.index}\r\n          data-cardtype={this.props.type}\r\n          onClick={this.clickMe}\r\n          className={\r\n            \"card card--\" + this.props.type + \" card--\" + this.props.position\r\n          }\r\n        >\r\n          <Grid className=\"card__inner\">\r\n            <Grid className=\"card__face card__front\"></Grid>\r\n            <Grid className=\"card__face card__back\"></Grid>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n  }","import React from \"react\";\r\nimport \"../main.scss\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogActions,\r\n    DialogContent,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\n\r\nexport function DialogBox(props) {\r\n    console.log('props', props)\r\n    return (\r\n        <Dialog\r\n            open={true}\r\n            onClose={props.handleClose}\r\n            aria-labelledby=\"scroll-dialog-title\"\r\n            aria-describedby=\"scroll-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"scroll-dialog-title\">History</DialogTitle>\r\n            <DialogContent>\r\n                <Table aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">Id</TableCell>\r\n                            <TableCell align=\"center\">Date/Time</TableCell>\r\n                            <TableCell align=\"right\">Total Move</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {props.history.length ?\r\n                            props.history.map((data, index) => {\r\n                                return (\r\n                                    <TableRow key={index}>\r\n                                        <TableCell align=\"left\">{index + 1}</TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {moment(data.timeStamp).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">{data.totalMove}</TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                            }) : null}\r\n                    </TableBody>\r\n                </Table>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.handleClose} color=\"primary\">\r\n                    Cancel\r\n          </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import React from \"react\";\r\nimport \"../main.scss\";\r\nimport {\r\n  Button,\r\n  Grid\r\n} from \"@material-ui/core\";\r\nimport swal from \"sweetalert\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport { HomeScreen } from \"../homeScreen\";\r\nimport { Card } from \"../card\";\r\nimport { DialogBox } from \"../utils/dialogBox\";\r\n\r\nconst uniqueCards = [\"michael\", \"mark\", \"andrew\", \"adam\", \"ahmet\", \"david\"];\r\nconst numCardsToMatch = 2;\r\n\r\nexport class MemoryGame extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.shuffleCards = this.shuffleCards.bind(this);\r\n    this.pickCard = this.pickCard.bind(this);\r\n    this.addWin = this.addWin.bind(this);\r\n    this.ignoreCardClicks = false;\r\n\r\n    this.state = {\r\n      cards: [],\r\n      email: null,\r\n      selectedCards: [],\r\n      gameStart: 1,\r\n      open: false,\r\n      totalMove: 0,\r\n      history: [],\r\n      registered: false,\r\n    };\r\n  }\r\n\r\n  multiplyCards(cards, multiplier) {\r\n    let loopTimes = multiplier - 1;\r\n    let multiplied = cards;\r\n    for (var i = 0; i < loopTimes; i++) {\r\n      multiplied = _.concat(multiplied, cards);\r\n    }\r\n\r\n    return multiplied;\r\n  }\r\n\r\n  async shuffleCards(userData) {\r\n    let cards = [];\r\n    let pastMove = 0;\r\n    const getCards = () => {\r\n      let multipliedCards = this.multiplyCards(uniqueCards, numCardsToMatch);\r\n      let shuffled = _.shuffle(multipliedCards);\r\n      const getCard = shuffled.map(function (val) {\r\n        return {\r\n          type: val,\r\n          position: \"unselected\",\r\n        };\r\n      });\r\n      return getCard;\r\n    }\r\n    if (userData && userData.resumeGame && userData.cards && userData.cards.length) {\r\n      let isContinue = false;\r\n      await swal({\r\n        title: 'Resume Game',\r\n        text: \"You want to continue last game ?\",\r\n        buttons: {\r\n          cancel: true,\r\n          confirm: true\r\n        },\r\n        type: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n      }).then(async function (isConfirm) {\r\n        if (isConfirm) {\r\n          isContinue = true\r\n          pastMove = userData.totalMove\r\n        } else {\r\n          isContinue = false\r\n        }\r\n      })\r\n      if (isContinue) {\r\n        cards = userData.cards\r\n      } else {\r\n        cards = getCards()\r\n      }\r\n    } else {\r\n      cards = getCards()\r\n    }\r\n\r\n    this.setState({\r\n      cards: cards,\r\n      gameStart: 0,\r\n      totalMove: pastMove,\r\n      registered: true,\r\n    });\r\n  }\r\n\r\n  changeAllPositionsOfSelected(allCards, selectedCards, newPosition) {\r\n    for (var v of selectedCards) {\r\n      allCards[v].position = newPosition;\r\n    }\r\n    return allCards;\r\n  }\r\n\r\n  async addWin() {\r\n    const totalMove = this.state.totalMove;\r\n    await fetch(\"/api/update-history\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ email: this.state.email, totalMove }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        swal(\r\n          \"Good job!\",\r\n          `You complete this game in ${totalMove} move!`,\r\n          \"success\",\r\n          {\r\n            button: \"Play again!\",\r\n          }\r\n        ).then((value) => {\r\n          this.shuffleCards();\r\n          let newHistory = this.state.history;\r\n          newHistory.push({\r\n            timeStamp: new Date(),\r\n            totalMove: totalMove,\r\n          });\r\n          this.setState({\r\n            totalMove: 0,\r\n            history: newHistory,\r\n          });\r\n        });\r\n      });\r\n  }\r\n\r\n  selectedHasSameAttribute(allCards, selectedCards, attribute) {\r\n    let eq = allCards[selectedCards[0]][attribute];\r\n    for (var v of selectedCards) {\r\n      if (allCards[v][attribute] !== eq) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  checkForMatch(curCards, curSelectedCards) {\r\n    if (this.selectedHasSameAttribute(curCards, curSelectedCards, \"type\")) {\r\n      curCards = this.changeAllPositionsOfSelected(\r\n        curCards,\r\n        curSelectedCards,\r\n        \"removed\"\r\n      );\r\n\r\n      let winTest = _.reduce(\r\n        curCards,\r\n        function (result, value, key) {\r\n          if (result === value.position) {\r\n            return result;\r\n          } else {\r\n            return false;\r\n          }\r\n        },\r\n        curCards[0].position\r\n      );\r\n\r\n      if (winTest !== false) {\r\n        this.addWin();\r\n      }\r\n    } else {\r\n      curCards = this.changeAllPositionsOfSelected(\r\n        curCards,\r\n        curSelectedCards,\r\n        \"unselected\"\r\n      );\r\n    }\r\n\r\n    return curCards;\r\n  }\r\n\r\n  pickCard(index) {\r\n    if (this.ignoreCardClicks !== true) {\r\n      let curSelectedCards = _.concat(this.state.selectedCards, index);\r\n      let curCards = this.state.cards;\r\n\r\n      curCards[curSelectedCards[curSelectedCards.length - 1]].position =\r\n        \"selected\";\r\n\r\n      if (curSelectedCards.length === numCardsToMatch) {\r\n        this.setState({\r\n          cards: curCards,\r\n          totalMove: this.state.totalMove + 1,\r\n        });\r\n\r\n        let _this = this;\r\n        this.ignoreCardClicks = true;\r\n\r\n        setTimeout(function () {\r\n          curCards = _this.checkForMatch(curCards, curSelectedCards);\r\n          curSelectedCards = [];\r\n\r\n          _this.ignoreCardClicks = false;\r\n\r\n          _this.setState({\r\n            selectedCards: curSelectedCards,\r\n            cards: curCards,\r\n          });\r\n        }, 750);\r\n      } else {\r\n        curCards[curSelectedCards[0]].position = \"selected\";\r\n\r\n        this.setState({\r\n          selectedCards: curSelectedCards,\r\n          cards: curCards,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleDialog(value) {\r\n    this.setState({\r\n      open: value,\r\n    });\r\n  }\r\n\r\n  previousHistory(data) {\r\n    this.setState({\r\n      history: data.history,\r\n    });\r\n  }\r\n\r\n  handleChangeEmail(email) {\r\n    this.setState({ email });\r\n  }\r\n\r\n  handleConfirmLogOut(email, cards, totalMove) {\r\n    if (this.state.totalMove) {\r\n      swal({\r\n        title: 'Are you sure?',\r\n        text: \"You want to save this game ?\",\r\n        buttons: {\r\n          cancel: true,\r\n          confirm: {\r\n            text: \"Yes\",\r\n            value: \"Yes\"\r\n          },\r\n          roll: {\r\n            text: \"No\",\r\n            value: \"No\"\r\n          }\r\n        },\r\n        type: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n      }).then(async function (isConfirm) {\r\n        if (isConfirm) {\r\n          await fetch(\"/api/save-game\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ email, cards, isConfirm, totalMove }),\r\n            headers: {\r\n              \"Content-type\": \"application/json; charset=UTF-8\",\r\n            },\r\n          })\r\n            .then((res) => res.json())\r\n          window.location.reload()\r\n        }\r\n      })\r\n    } else {\r\n      window.location.reload()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let clickEvent = this.pickCard;\r\n    let cardIndex = 0;\r\n    const { registered, gameStart, totalMove, email, cards } = this.state\r\n\r\n    return (\r\n      <Grid className=\"memory-app\">\r\n        <HomeScreen\r\n          gameStart={gameStart}\r\n          clickEvent={this.shuffleCards}\r\n          previousHistory={(data) => this.previousHistory(data)}\r\n          handleChangeEmail={(data) => this.handleChangeEmail(data)}\r\n        />\r\n        {registered && (\r\n          <Grid className=\"cards\" style={{ paddingTop: 46 }}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n              style={{ padding: 22 }}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => this.handleDialog(true)}\r\n              >\r\n                History\r\n              </Button>\r\n              <h3> Total Move : {totalMove}</h3>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={async () => this.handleConfirmLogOut(email, cards, totalMove)}\r\n              >\r\n                Logout\r\n              </Button>\r\n            </Grid>\r\n            {this.state.cards.map(function (thisCard, index) {\r\n              return (\r\n                <Card\r\n                  index={cardIndex++}\r\n                  key={index}\r\n                  clickEvent={clickEvent}\r\n                  position={thisCard.position}\r\n                  type={thisCard.type}\r\n                />\r\n              );\r\n            })}\r\n          </Grid>\r\n        )}\r\n        {this.state.open && (\r\n          <DialogBox\r\n            handleClose={() => this.handleDialog(false)}\r\n            history={this.state.history}\r\n          />\r\n        )}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { MemoryGame } from \"./game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MemoryGame />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <App />\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}